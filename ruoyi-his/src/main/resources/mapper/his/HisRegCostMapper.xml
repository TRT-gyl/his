<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.his.mapper.HisRegCostMapper">
    
    <resultMap type="HisRegCost" id="HisRegCostResult">
        <result property="regId"    column="reg_id"    />
        <result property="regName"    column="reg_name"    />
        <result property="regPrice"    column="reg_price"    />
        <result property="status"    column="status"    />
        <result property="createBy"    column="create_by"    />
        <result property="createTime"    column="create_time"    />
        <result property="updateBy"    column="update_by"    />
        <result property="updateTime"    column="update_time"    />
    </resultMap>

    <sql id="selectHisRegCostVo">
        select reg_id, reg_name, reg_price, status, create_by, create_time, update_by, update_time from his_reg_cost
    </sql>

    <select id="selectHisRegCostList" parameterType="HisRegCost" resultMap="HisRegCostResult">
        <include refid="selectHisRegCostVo"/>
        <where>  
            <if test="regName != null  and regName != ''"> and reg_name like concat('%', #{regName}, '%')</if>
            <if test="status != null  and status != ''"> and status = #{status}</if>
        </where>
    </select>
    
    <select id="selectHisRegCostByRegId" parameterType="Long" resultMap="HisRegCostResult">
        <include refid="selectHisRegCostVo"/>
        where reg_id = #{regId}
    </select>
        
    <insert id="insertHisRegCost" parameterType="HisRegCost" useGeneratedKeys="true" keyProperty="regId">
        insert into his_reg_cost
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="regName != null and regName != ''">reg_name,</if>
            <if test="regPrice != null">reg_price,</if>
            <if test="status != null">status,</if>
            <if test="createBy != null">create_by,</if>
            <if test="createTime != null">create_time,</if>
            <if test="updateBy != null">update_by,</if>
            <if test="updateTime != null">update_time,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="regName != null and regName != ''">#{regName},</if>
            <if test="regPrice != null">#{regPrice},</if>
            <if test="status != null">#{status},</if>
            <if test="createBy != null">#{createBy},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="updateBy != null">#{updateBy},</if>
            <if test="updateTime != null">#{updateTime},</if>
         </trim>
    </insert>

    <update id="updateHisRegCost" parameterType="HisRegCost">
        update his_reg_cost
        <trim prefix="SET" suffixOverrides=",">
            <if test="regName != null and regName != ''">reg_name = #{regName},</if>
            <if test="regPrice != null">reg_price = #{regPrice},</if>
            <if test="status != null">status = #{status},</if>
            <if test="createBy != null">create_by = #{createBy},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="updateBy != null">update_by = #{updateBy},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
        </trim>
        where reg_id = #{regId}
    </update>

    <delete id="deleteHisRegCostByRegId" parameterType="Long">
        delete from his_reg_cost where reg_id = #{regId}
    </delete>

    <delete id="deleteHisRegCostByRegIds" parameterType="String">
        delete from his_reg_cost where reg_id in 
        <foreach item="regId" collection="array" open="(" separator="," close=")">
            #{regId}
        </foreach>
    </delete>
</mapper>